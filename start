#!/usr/bin/env ruby
require_relative './app/neo4ruby'

trap("INT"){ exit() }

begin
  strategies = [PayloadProcessingStrategies::WikiSpecialsCleaner.new,
                PayloadProcessingStrategies::Splitter.new(type: :sentence),
                PayloadProcessingStrategies::Splitter.new(type: :word, word_utility: true),
                PayloadProcessingStrategies::Normalizer.new]
  processor = PayloadProcessor.new(strategies)
  converter = PayloadConvertingStrategies::ObligatoryOptionalConverter.new
  builder = Builders::GraphBuilder.new(expression_builder: Builders::ExpressionBuilder.new, assoc_engine: AssocEngine.new, payload_converter: converter)

  manager = ServerManager.new(payload_processor: processor, graph_builder: builder, start_db: true)
  manager.parse_command_line()
  manager.run()

rescue Exception => e

  unless e.is_a? SystemExit
    puts "#{e.message}: #{e.inspect}"
    puts e.backtrace
  end

ensure
  manager ||= nil
  manager.stop() if manager
end
